import React, { useState } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { Controlled as CodeMirror } from 'react-codemirror2';

// Import styles for CodeMirror
import 'codemirror/lib/codemirror.css';
import 'codemirror/mode/javascript/javascript';

// Define types for schema and form fields
interface Field {
  id: string;
  type: string;
  label: string;
  required?: boolean;
  placeholder?: string;
  options?: { value: string; label: string }[];
  validation?: { pattern: string; message: string };
}

interface Schema {
  formTitle: string;
  formDescription: string;
  fields: Field[];
}

const DynamicForm: React.FC = () => {
  const [json, setJson] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const [schema, setSchema] = useState<Schema | null>(null);
  const { register, handleSubmit, formState: { errors } } = useForm();

  // Handle JSON changes
  const handleJsonChange = (value: string) => {
    setJson(value);
    try {
      const parsed = JSON.parse(value);
      setSchema(parsed);
      setError(null);
    } catch (err) {
      setError('Invalid JSON');
      setSchema(null);
    }
  };

  // Handle form submission
  const onSubmit: SubmitHandler<any> = (data) => {
    console.log('Form Submitted:', data);
    alert('Form submitted successfully!');
  };

  return (
    <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4 p-4">
      {/* JSON Editor Section */}
      <div className="w-full md:w-1/2 p-4 bg-white shadow-md rounded-md">
        <h2 className="text-xl font-bold mb-2">JSON Editor</h2>
        <CodeMirror
          value={json}
          options={{
            mode: 'javascript',
            lineNumbers: true,
            tabSize: 2,
          }}
          onBeforeChange={(_, __, value) => handleJsonChange(value)}
        />
        {error && <p className="text-red-500 text-sm mt-2">{error}</p>}
      </div>

      {/* Form Preview Section */}
      <div className="w-full md:w-1/2 p-4 bg-gray-100 shadow-md rounded-md">
        {schema ? (
          <>
            <h1 className="text-2xl font-bold mb-2">{schema.formTitle}</h1>
            <p className="mb-4">{schema.formDescription}</p>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              {schema.fields.map((field) => {
                switch (field.type) {
                  case 'text':
                  case 'email':
                  case 'textarea':
                    return (
                      <div key={field.id} className="space-y-1">
                        <label htmlFor={field.id} className="block text-sm font-medium">
                          {field.label} {field.required && <span className="text-red-500">*</span>}
                        </label>
                        {field.type === 'textarea' ? (
                          <textarea
                            id={field.id}
                            placeholder={field.placeholder}
                            {...register(field.id, { required: field.required })}
                            className="w-full p-2 border rounded"
                          />
                        ) : (
                          <input
                            id={field.id}
                            type={field.type}
                            placeholder={field.placeholder}
                            {...register(field.id, {
                              required: field.required,
                              pattern: field.validation?.pattern
                                ? {
                                    value: new RegExp(field.validation.pattern),
                                    message: field.validation.message,
                                  }
                                : undefined,
                            })}
                            className="w-full p-2 border rounded"
                          />
                        )}
                        {errors[field.id] && (
                          <p className="text-red-500 text-sm">
                            {errors[field.id]?.message || `${field.label} is required`}
                          </p>
                        )}
                      </div>
                    );

                  case 'select':
                    return (
                      <div key={field.id} className="space-y-1">
                        <label htmlFor={field.id} className="block text-sm font-medium">
                          {field.label} {field.required && <span className="text-red-500">*</span>}
                        </label>
                        <select
                          id={field.id}
                          {...register(field.id, { required: field.required })}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Select an option</option>
                          {field.options?.map((option) => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                        {errors[field.id] && (
                          <p className="text-red-500 text-sm">
                            {field.label} is required
                          </p>
                        )}
                      </div>
                    );

                  case 'radio':
                    return (
                      <div key={field.id} className="space-y-1">
                        <label className="block text-sm font-medium">
                          {field.label} {field.required && <span className="text-red-500">*</span>}
                        </label>
                        <div>
                          {field.options?.map((option) => (
                            <label key={option.value} className="block">
                              <input
                                type="radio"
                                value={option.value}
                                {...register(field.id, { required: field.required })}
                                className="mr-2"
                              />
                              {option.label}
                            </label>
                          ))}
                        </div>
                        {errors[field.id] && (
                          <p className="text-red-500 text-sm">
                            {field.label} is required
                          </p>
                        )}
                      </div>
                    );

                  default:
                    return null;
                }
              })}
              <button
                type="submit"
                className="w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                Submit
              </button>
            </form>
          </>
        ) : (
          <p>Enter a valid JSON schema to generate a form.</p>
        )}
      </div>
    </div>
  );
};
